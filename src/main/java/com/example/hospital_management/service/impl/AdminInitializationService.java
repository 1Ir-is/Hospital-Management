package com.example.hospital_management.service.impl;

import com.example.hospital_management.entity.*;
import com.example.hospital_management.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.List;

@Service
public class AdminInitializationService implements ApplicationRunner {

    @Autowired
    private IEmployeeRepository employeeRepository;

    @Autowired
    private IRoleRepository roleRepository;

    @Autowired
    private IEmployeeRoleRepository employeeRoleRepository;

    @Autowired
    private IDepartmentRepository departmentRepository;

    @Autowired
    private IPositionRepository positionRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Override
    @Transactional
    public void run(ApplicationArguments args) throws Exception {
        System.out.println("üöÄ Initializing Hospital Management System...");

        try {
            // 1. T·∫°o c√°c Role c∆° b·∫£n n·∫øu ch∆∞a c√≥
            initializeRoles();

            // 2. T·∫°o Department v√† Position c∆° b·∫£n n·∫øu ch∆∞a c√≥
            initializeDepartmentsAndPositions();

            // 3. T·∫°o Admin account n·∫øu ch∆∞a c√≥
            createDefaultAdminAccount();

            System.out.println("‚úÖ Hospital Management System initialized successfully!");
            System.out.println("üéâ Ready to login with admin@hospital.com / admin123");

        } catch (Exception e) {
            System.err.println("‚ùå Error during initialization: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void initializeRoles() {
        System.out.println("üìã Initializing roles...");

        String[] roleCodes = {"ADMIN", "DEPARTMENT_HEAD", "DOCTOR", "NURSE", "RECEPTIONIST",
                "LAB_TECHNICIAN", "CASHIER", "PHARMACY_STAFF", "PATIENT"};
        String[] roleNames = {"Qu·∫£n tr·ªã vi√™n", "Tr∆∞·ªüng khoa", "B√°c sƒ©", "ƒêi·ªÅu d∆∞·ª°ng", "L·ªÖ t√¢n",
                "K·ªπ thu·∫≠t vi√™n x√©t nghi·ªám", "Thu ng√¢n", "Nh√¢n vi√™n ph√≤ng v·∫≠t t∆∞", "B·ªánh nh√¢n"};

        for (int i = 0; i < roleCodes.length; i++) {
            // ‚úÖ T·∫°o bi·∫øn final ƒë·ªÉ s·ª≠ d·ª•ng trong lambda
            final String currentRoleCode = roleCodes[i];
            final String currentRoleName = roleNames[i];

            try {
                // ‚úÖ S·ª≠ d·ª•ng bi·∫øn final trong lambda
                List<Role> existingRoles = roleRepository.findAll();
                Role existingRole = existingRoles.stream()
                        .filter(role -> currentRoleCode.equals(role.getCode()))
                        .findFirst()
                        .orElse(null);

                if (existingRole == null) {
                    Role role = new Role();
                    role.setCode(currentRoleCode);
                    role.setName(currentRoleName);
                    roleRepository.save(role);
                    System.out.println("   ‚úÖ Created role: " + currentRoleName + " (" + currentRoleCode + ")");
                } else {
                    System.out.println("   ‚ÑπÔ∏è Role already exists: " + currentRoleName);
                }
            } catch (Exception e) {
                System.err.println("   ‚ùå Error creating role " + currentRoleCode + ": " + e.getMessage());
            }
        }
    }

    private void initializeDepartmentsAndPositions() {
        System.out.println("üè¢ Initializing departments and positions...");

        // T·∫°o c√°c Department c∆° b·∫£n
        String[] deptNames = {
                "Ph√≤ng H√†nh ch√≠nh", "Khoa N·ªôi", "Khoa Ngo·∫°i", "Khoa S·∫£n", "Khoa Nhi",
                "Khoa Tim M·∫°ch", "Khoa Th·∫ßn Kinh", "Khoa X√©t nghi·ªám", "Khoa D∆∞·ª£c", "Khoa C·∫•p c·ª©u"
        };
        String[] deptDescs = {
                "Ph√≤ng qu·∫£n l√Ω h√†nh ch√≠nh v√† ƒëi·ªÅu h√†nh chung",
                "Khoa kh√°m v√† ƒëi·ªÅu tr·ªã b·ªánh n·ªôi khoa",
                "Khoa ph·∫´u thu·∫≠t v√† ƒëi·ªÅu tr·ªã ngo·∫°i khoa",
                "Khoa s·∫£n ph·ª• khoa",
                "Khoa nhi ƒë·ªìng",
                "Khoa chuy√™n khoa tim m·∫°ch",
                "Khoa chuy√™n khoa th·∫ßn kinh",
                "Khoa x√©t nghi·ªám v√† ch·∫©n ƒëo√°n",
                "Khoa d∆∞·ª£c v√† v·∫≠t t∆∞ y t·∫ø",
                "Khoa c·∫•p c·ª©u 24/7"
        };

        // ‚úÖ T·∫°o departments
        for (int i = 0; i < deptNames.length; i++) {
            final String currentDeptName = deptNames[i];
            final String currentDeptDesc = deptDescs[i];

            try {
                List<Department> existingDepts = departmentRepository.findAll();
                Department existingDept = existingDepts.stream()
                        .filter(dept -> currentDeptName.equals(dept.getName()))
                        .findFirst()
                        .orElse(null);

                if (existingDept == null) {
                    Department dept = new Department();
                    dept.setName(currentDeptName);
                    dept.setDescription(currentDeptDesc);
                    departmentRepository.save(dept);
                    System.out.println("   ‚úÖ Created department: " + currentDeptName);
                }
            } catch (Exception e) {
                System.err.println("   ‚ùå Error creating department " + currentDeptName + ": " + e.getMessage());
            }
        }

        // T·∫°o c√°c Position c∆° b·∫£n
        String[] posNames = {
                "Qu·∫£n tr·ªã vi√™n", "Tr∆∞·ªüng khoa", "B√°c sƒ©", "ƒêi·ªÅu d∆∞·ª°ng", "H·ªô l√Ω",
                "L·ªÖ t√¢n", "Thu ng√¢n", "K·ªπ thu·∫≠t vi√™n x√©t nghi·ªám", "D∆∞·ª£c sƒ©", "Nh√¢n vi√™n v·∫≠t t∆∞"
        };
        String[] posDescs = {
                "Qu·∫£n tr·ªã h·ªá th·ªëng v√† ƒëi·ªÅu h√†nh chung",
                "Tr∆∞·ªüng khoa qu·∫£n l√Ω v√† ƒëi·ªÅu h√†nh khoa",
                "B√°c sƒ© kh√°m v√† ƒëi·ªÅu tr·ªã b·ªánh nh√¢n",
                "ƒêi·ªÅu d∆∞·ª°ng chƒÉm s√≥c b·ªánh nh√¢n",
                "H·ªô l√Ω h·ªó tr·ª£ chƒÉm s√≥c b·ªánh nh√¢n",
                "L·ªÖ t√¢n ti·∫øp ƒë√≥n v√† h∆∞·ªõng d·∫´n b·ªánh nh√¢n",
                "Thu ng√¢n thu ti·ªÅn vi·ªán ph√≠",
                "K·ªπ thu·∫≠t vi√™n th·ª±c hi·ªán x√©t nghi·ªám",
                "D∆∞·ª£c sƒ© c·∫•p ph√°t v√† t∆∞ v·∫•n thu·ªëc",
                "Nh√¢n vi√™n qu·∫£n l√Ω v·∫≠t t∆∞ y t·∫ø"
        };

        // ‚úÖ T·∫°o positions
        for (int i = 0; i < posNames.length; i++) {
            final String currentPosName = posNames[i];
            final String currentPosDesc = posDescs[i];

            try {
                List<Position> existingPositions = positionRepository.findAll();
                Position existingPos = existingPositions.stream()
                        .filter(pos -> currentPosName.equals(pos.getName()))
                        .findFirst()
                        .orElse(null);

                if (existingPos == null) {
                    Position pos = new Position();
                    pos.setName(currentPosName);
                    pos.setDescription(currentPosDesc);
                    positionRepository.save(pos);
                    System.out.println("   ‚úÖ Created position: " + currentPosName);
                }
            } catch (Exception e) {
                System.err.println("   ‚ùå Error creating position " + currentPosName + ": " + e.getMessage());
            }
        }
    }

    private void createDefaultAdminAccount() {
        System.out.println("üë®‚Äçüíº Checking admin account...");

        try {
            // Check xem ƒë√£ c√≥ admin ch∆∞a
            Employee existingAdmin = employeeRepository.findByEmail("admin@hospital.com");
            if (existingAdmin != null) {
                System.out.println("   ‚ÑπÔ∏è Admin account already exists: admin@hospital.com");
                return;
            }

            // ‚úÖ T√¨m ADMIN role
            List<Role> allRoles = roleRepository.findAll();
            Role adminRole = allRoles.stream()
                    .filter(role -> "ADMIN".equals(role.getCode()))
                    .findFirst()
                    .orElse(null);

            if (adminRole == null) {
                System.err.println("   ‚ùå ADMIN role not found! Cannot create admin account.");
                return;
            }

            // ‚úÖ T√¨m Department v√† Position
            List<Department> allDepts = departmentRepository.findAll();
            Department adminDept = allDepts.stream()
                    .filter(dept -> "Ph√≤ng H√†nh ch√≠nh".equals(dept.getName()))
                    .findFirst()
                    .orElse(null);

            List<Position> allPositions = positionRepository.findAll();
            Position adminPos = allPositions.stream()
                    .filter(pos -> "Qu·∫£n tr·ªã vi√™n".equals(pos.getName()))
                    .findFirst()
                    .orElse(null);

            if (adminDept == null || adminPos == null) {
                System.err.println("   ‚ùå Admin department or position not found!");
                return;
            }

            // T·∫°o Employee Admin
            Employee admin = new Employee();
            admin.setName("System Administrator");
            admin.setPhone("0123456789");
            admin.setEmail("admin@hospital.com");
            admin.setPassword(passwordEncoder.encode("admin123"));
            admin.setGender(true);
            admin.setAddress("H·ªá th·ªëng t·ª± ƒë·ªông t·∫°o");
            admin.setStartingDate(LocalDate.now());
            admin.setStatus(true);
            admin.setAvatar(null);
            admin.setDepartment(adminDept);
            admin.setPosition(adminPos);

            // Save employee
            Employee savedAdmin = employeeRepository.save(admin);
            System.out.println("   ‚úÖ Created admin employee: " + savedAdmin.getEmail());

            // Assign ADMIN role
            EmployeeRole employeeRole = new EmployeeRole();
            employeeRole.setEmployee(savedAdmin);
            employeeRole.setRole(adminRole);
            employeeRoleRepository.save(employeeRole);

            System.out.println("   ‚úÖ Assigned ADMIN role to: " + savedAdmin.getEmail());
            System.out.println("");
            System.out.println("üéâ DEFAULT ADMIN ACCOUNT CREATED SUCCESSFULLY!");
            System.out.println("üìß Email: admin@hospital.com");
            System.out.println("üîë Password: admin123");
            System.out.println("‚ö†Ô∏è Please change the default password after first login!");
            System.out.println("");

        } catch (Exception e) {
            System.err.println("   ‚ùå Error creating admin account: " + e.getMessage());
            e.printStackTrace();
        }
    }
}